<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JavaScript Playground</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
            padding: 20px;
        }
        
        h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        
        .playground {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        @media (max-width: 768px) {
            .playground {
                grid-template-columns: 1fr;
            }
        }
        
        .editor-container, .output-container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }
        
        .panel-header {
            background: #4a5568;
            color: white;
            padding: 15px;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .editor {
            padding: 20px;
            min-height: 300px;
            font-family: 'Courier New', monospace;
            font-size: 16px;
            line-height: 1.5;
            border: none;
            width: 100%;
            resize: vertical;
            outline: none;
        }
        
        .output {
            padding: 20px;
            min-height: 300px;
            overflow-y: auto;
            background: #f7fafc;
        }
        
        .btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: background 0.3s;
        }
        
        .btn:hover {
            background: #5a67d8;
        }
        
        .examples {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }
        
        .example-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s;
        }
        
        .example-card:hover {
            transform: translateY(-5px);
        }
        
        .example-card h3 {
            color: #667eea;
            margin-bottom: 15px;
            border-bottom: 2px solid #e2e8f0;
            padding-bottom: 10px;
        }
        
        .example-card pre {
            background: #f7fafc;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            margin-bottom: 15px;
            font-family: 'Courier New', monospace;
        }
        
        .example-card button {
            background: #48bb78;
            width: 100%;
        }
        
        .example-card button:hover {
            background: #38a169;
        }
        
        .console-output {
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
        }
        
        .console-line {
            margin-bottom: 5px;
            padding: 5px;
            border-left: 3px solid #667eea;
            background: #edf2f7;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>JavaScript Playground</h1>
            <p class="subtitle">Experiment with JavaScript right in your browser</p>
        </header>
        
        <div class="playground">
            <div class="editor-container">
                <div class="panel-header">
                    <span>Code Editor</span>
                    <button id="run-btn" class="btn">Run Code</button>
                </div>
                <textarea id="editor" class="editor">// Welcome to JavaScript Playground!
// Try writing some JavaScript code and click "Run Code"

// Example:
const greeting = "Hello, World!";
console.log(greeting);

function calculate(a, b) {
    return a * b;
}

const result = calculate(5, 7);
console.log(`5 multiplied by 7 is: ${result}`);

// Arrays and objects
const fruits = ["Apple", "Banana", "Orange"];
console.log("Fruits:", fruits);

const person = {
    name: "John",
    age: 30,
    city: "New York"
};
console.log("Person:", person);</textarea>
            </div>
            
            <div class="output-container">
                <div class="panel-header">
                    <span>Output Console</span>
                    <button id="clear-btn" class="btn">Clear</button>
                </div>
                <div id="output" class="output">
                    <div class="console-output">
                        <div class="console-line">Output will appear here...</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="examples">
            <div class="example-card">
                <h3>Array Methods</h3>
                <pre>const numbers = [1, 2, 3, 4, 5];

// Map - creates a new array
const doubled = numbers.map(n => n * 2);

// Filter - creates a new array
const evens = numbers.filter(n => n % 2 === 0);

// Reduce - reduces to a single value
const sum = numbers.reduce((t, n) => t + n, 0);

console.log("Original:", numbers);
console.log("Doubled:", doubled);
console.log("Evens:", evens);
console.log("Sum:", sum);</pre>
                <button class="btn" onclick="loadExample(this)">Load Example</button>
            </div>
            
            <div class="example-card">
                <h3>DOM Manipulation</h3>
                <pre>// Create and modify elements
const container = document.createElement('div');
container.innerHTML = '&lt;h2>Dynamic Content&lt;/h2>';
container.style.padding = '20px';
container.style.backgroundColor = '#e2e8f0';

// Add elements to page
document.body.appendChild(container);

// Modify existing elements
const output = document.getElementById('output');
output.style.border = '2px dashed #667eea';

console.log('Page modified successfully!');</pre>
                <button class="btn" onclick="loadExample(this)">Load Example</button>
            </div>
            
            <div class="example-card">
                <h3>Async/Await</h3>
                <pre>// Simulate API call with timeout
function fetchData() {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve({ name: 'John Doe', age: 30 });
        }, 1000);
    });
}

// Async function to get data
async function getData() {
    console.log('Fetching data...');
    const data = await fetchData();
    console.log('Data received:', data);
    return data;
}

// Call the async function
getData().then(data => {
    console.log('Data processing complete');
});</pre>
                <button class="btn" onclick="loadExample(this)">Load Example</button>
            </div>
        </div>
    </div>

    <script>
        // Capture console.log output
        const originalConsoleLog = console.log;
        const outputElement = document.getElementById('output');
        
        console.log = function(...args) {
            originalConsoleLog.apply(console, args);
            
            const formattedArgs = args.map(arg => {
                if (typeof arg === 'object') {
                    return JSON.stringify(arg, null, 2);
                }
                return arg;
            }).join(' ');
            
            const outputLine = document.createElement('div');
            outputLine.className = 'console-line';
            outputLine.textContent = formattedArgs;
            
            outputElement.querySelector('.console-output').appendChild(outputLine);
        };
        
        // Run button functionality
        document.getElementById('run-btn').addEventListener('click', () => {
            const code = document.getElementById('editor').value;
            try {
                // Clear previous output
                outputElement.querySelector('.console-output').innerHTML = '';
                
                // Execute the code
                eval(code);
            } catch (error) {
                console.log(`Error: ${error.message}`);
            }
        });
        
        // Clear button functionality
        document.getElementById('clear-btn').addEventListener('click', () => {
            outputElement.querySelector('.console-output').innerHTML = 
                '<div class="console-line">Output cleared</div>';
        });
        
        // Load example into editor
        function loadExample(button) {
            const exampleCode = button.previousElementSibling.textContent;
            document.getElementById('editor').value = exampleCode;
        }
        
        // Add some error handling for the eval
        window.addEventListener('error', function(e) {
            console.log(`Error: ${e.error.message}`);
        });
    </script>
</body>
</html>
